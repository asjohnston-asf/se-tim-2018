AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Name:
    Type: String

  ElasticSearchCidrIp:
    Type: String

Resources:

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Name
      AccessControl: LogDeliveryWrite
      NotificationConfiguration:
        LambdaConfiguration:
        - Function: !GetAtt Lambda.Arn
          Event: s3:ObjectCreated:*

  Domain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Ref Name
      ElasticsearchVersion: 6.2
      AccessPolicies: !Sub |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "es:*",
              "Resource": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Name}/*",
              "Condition": {
                "IpAddress": {
                  "aws:SourceIp": "${ElasticSearchCidrIp}"
                }
              }
            }
          ]
        }
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t2.small.elasticsearch
        ZoneAwarenessEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-dlq"
      MessageRetentionPeriod: 1209600

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Name}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Ref Name
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: 
            - lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt DeadLetterQueue.Arn
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${Name}/*"
          - Effect: Allow
            Action:
            - es:ESHttpHead
            - es:ListDomainNames
            - es:ESHttpPost
            - es:ESHttpGet
            - es:CreateElasticsearchDomain
            - es:ESHttpPut
            Resource: "*"
          - Effect: Allow
            Action:
            - es:*
            Resource: !GetAtt Domain.DomainArn

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Name
      Code: src/
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Role: !GetAtt Role.Arn
      Environment: 
        Variables:
          ES_HOST: !GetAtt Domain.DomainEndpoint
      Timeout: 60
      Handler: main.lambda_handler
      Runtime: python3.6
      MemorySize: 128

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${Name}"
